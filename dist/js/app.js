var model={previousCommands:[{text:"type 'help' to view commands",type:"response"}],commandPrefix:"$",currentOutput:null,commands:[{text:"",params:null},{text:"help",params:null},{text:"email",params:["<subject>"]},{text:"open",params:["resume"]},{text:"show",params:["education","skills","xp"]}],defaultMessage:{message:["to view the resume, enter 'open resume' in the terminal to the left","type 'help' to view other commands"]},data:{name:"John Sylvain",position:"Web developer and designer",contact:{email:"me@johnsylva.in",phone:3136180632,social:{github:"http://github.com/johnsylvain",linkedin:"http://linkedin.com/in/johnsylvain"}},education:{name:"Purdue University",gradutionDate:"May 2017",gpa:3.97,area:{major:"Computer Graphics Technology",minor:"Computer Information Technology"}},experience:[{title:"Blast Radius",position:"Web Development Intern",date:"Summer 2015",description:["Developed interactive website experiences for a variety of clients.","Collaborated with professionals in web development and design."]},{title:"Freelance Graphic Design",date:"August 2014 - Present",description:["Consulted with clients to produce designs and marketing materials","Clients include: Organizaions, Student Government Campaigns, and Career Fairs"]},{title:"Eagle Scout",date:"June 2013",description:["Oversaw the development and conducted a community service project.","Resulted in more than 150 hours of service."]}],skills:{languages:[{name:"HTML/CSS",related:["SASS","jade"]},{name:"JavaScript",related:["AngularJS","Vue.js","Node.js","Express.js","jQuery"]},{name:"PHP",related:["SQL","Slim","Flight"]}],technical:["git","gulp"]}}},filters={textToJSON:function(e){return"string"!=typeof e&&(e=JSON.stringify(e,void 0,2)),e=e.replace(/&/g,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;"),e.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g,function(e){var t="number";return/^"/.test(e)?t=/:$/.test(e)?"key":"string":/true|false/.test(e)?t="boolean":/null/.test(e)&&(t="null"),'<span class="'+t+'">'+e+"</span>"})}},controller={init:function(){model.currentOutput=model.defaultMessage,resumeContentView.init(),consoleView.init()},getResumeData:function(){return model.data},getDefaultData:function(){return model.defaultMessage},getCurrentOutput:function(){return model.currentOutput},updateOutput:function(e,t){model.currentOutput=e,t()},enterCommand:function(e){var t=!1,n=e.split(" ");model.previousCommands.push({text:e,type:"command"});for(var o=0;o<model.commands.length;o++){var r=model.commands[o];n[0]===r.text&&(t=!0)}t?this.executeCommand(e):model.previousCommands.push({text:"command not found: "+n[0],type:"error"},{text:"to view available commands type: help",type:"response"}),consoleView.render()},executeCommand:function(e){var t=this,n=e.split(" "),o={help:function(){var e=model.commands;model.previousCommands.push({text:"-----",type:"response"},{text:"Available Commands:",type:"response"},{text:"-----",type:"response"});for(var t=0;t<e.length;t++){var n=e[t];model.previousCommands.push({text:n.text,type:"response"}),null!==n.params&&model.previousCommands.push({text:"-accepts: "+n.params,type:"response"})}consoleView.render()},open:function(){var e=function(){t.updateOutput({resume:model.data},function(){resumeContentView.render()})};return 1!==n.length?{resume:e}:void model.previousCommands.push({text:"type 'open resume'",type:"warning"})},show:function(){var e=function(){t.updateOutput({education:model.data.education},function(){resumeContentView.render()})},o=function(){t.updateOutput({experience:model.data.experience},function(){resumeContentView.render()})},r=function(){t.updateOutput({skills:model.data.skills},function(){resumeContentView.render()})};return 1!==n.length?{education:e,skills:r,xp:o}:void model.previousCommands.push({text:"type 'show ["+model.commands[4].params+"]'",type:"warning"})},email:function(){for(var e="",t=1;t<n.length;t++)e+=" "+n[t];var o="mailto:me@johnsylva.in?subject="+e;window.open(o)}};if(1===n.length)o[n[0]]();else if("email"===n[0])o[n[0]]();else if(n.length>1){var r=o[n[0]]();r[n[1]]?r[n[1]]():model.previousCommands.push({text:n[1]+" is not a proper parameter of '"+n[0]+"'",type:"error"})}},getPreviousCommands:function(){return model.previousCommands},getFileName:function(){var e=model.currentOutput,t=Object.keys(e)[0];return t}},resumeContentView={init:function(){this.resumeContainerElem=document.getElementById("resume-code"),this.render()},render:function(){var e=controller.getCurrentOutput(),t=filters.textToJSON(JSON.stringify(e,null,"  "));this.resumeContainerElem.innerHTML=t}},consoleView={init:function(){this.promptElem=document.getElementById("command-prompt"),this.prevElem=document.getElementById("commands"),this.fileNameElem=document.getElementById("file-name");var e=document.getElementById("console"),t=document.getElementById("command-input");t.focus(),e.addEventListener("click",function(){t.focus()}),this.promptElem.addEventListener("submit",function(e){e.preventDefault();var t=e.target.prompt.value;e.target.prompt.value="",controller.enterCommand(t)}),this.render()},render:function(){this.prevElem.innerHTML="";var e=controller.getPreviousCommands();this.fileNameElem.textContent=controller.getFileName();for(var t=0;t<e.length;t++){var n=e[t],o=document.createElement("li");"command"===n.type?o.textContent="$ "+n.text:"error"===n.type?(o.textContent=n.text,o.className="commandError"):"response"===n.type?(o.textContent=n.text,o.className="commandResponse"):"warning"===n.type&&(o.textContent=n.text,o.className="commandWarning"),this.prevElem.appendChild(o)}}};controller.init();
//# sourceMappingURL=data:application/json;base64,
